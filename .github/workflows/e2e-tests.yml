name: e2e tests
"on":
  workflow_call:
    inputs:
      grafana-image-tag:
        required: true
        type: string
      browsers:
        required: true
        type: string
      run-expensive-tests:
        description: >
          Whether or not to run Playwright tests that're annotated as "@expensive"
          (ex. tests that incur costs such as sending SMSes via Twilio/Mailslurp)
        required: true
        type: boolean
    secrets:
      TWILIO_ACCOUNT_SID:
        required: true
      TWILIO_AUTH_TOKEN:
        required: true
      TWILIO_PHONE_NUMBER:
        required: true
      TWILIO_VERIFY_SID:
        required: true
      MAILSLURP_API_KEY:
        required: true

jobs:
  end-to-end-tests:
    # default "ubuntu-latest" runners only provide 2 CPU cores + 7GB of RAM. this seems to lead to HTTP 504s from
    # the oncall backend, and hence, flaky tests. Let's use CI runners w/ more resources to avoid this (plus
    # this will allow us to run more backend containers and parralelize the tests)
    runs-on: ubuntu-latest-8-cores
    name: "Grafana: ${{ inputs.grafana-image-tag }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Collect Workflow Telemetry
        uses: runforesight/workflow-telemetry-action@v1
        with:
          comment_on_pr: false
          proc_trace_chart_show: false
          proc_trace_table_show: false

      - name: Install Kind
        uses: helm/kind-action@v1.3.0
        with:
          config: ./.github/kind.yml
          install_only: true

      - uses: actions/setup-node@v3
        with:
          node-version: 18.16.0
          cache: "yarn"
          cache-dependency-path: grafana-plugin/yarn.lock

      - name: Install Tilt
        run: |
          curl -fsSL https://raw.githubusercontent.com/tilt-dev/tilt/master/scripts/install.sh | bash

      - name: Install ctlptl
        run: |
          CTLPTL_VERSION="0.8.20"
          curl -fsSL https://github.com/tilt-dev/ctlptl/releases/download/v$CTLPTL_VERSION/ctlptl.$CTLPTL_VERSION.linux.x86_64.tar.gz | \
            tar -xzv -C /usr/local/bin ctlptl

      - name: Use cached frontend dependencies
        id: cache-frontend-dependencies
        uses: actions/cache@v3
        with:
          path: grafana-plugin/node_modules
          key: ${{ runner.os }}-frontend-node-modules-${{ hashFiles('grafana-plugin/yarn.lock') }}

      - name: Install frontend dependencies
        if: steps.cache-frontend-dependencies.outputs.cache-hit != 'true'
        working-directory: grafana-plugin
        run: yarn install --frozen-lockfile --prefer-offline --network-timeout 500000

      # helpful reference for properly caching the playwright binaries/dependencies
      # https://playwrightsolutions.com/playwright-github-action-to-cache-the-browser-binaries/

      - name: Get installed Playwright version
        id: playwright-version
        working-directory: grafana-plugin
        run: >
          echo "PLAYWRIGHT_VERSION=$(cat ./package.json |
          jq -r '.devDependencies["@playwright/test"]')" >> $GITHUB_ENV

      - name: Cache Playwright binaries/dependencies
        id: playwright-cache
        uses: actions/cache@v3
        with:
          path: "~/.cache/ms-playwright"
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}-chromium-firefox-webkit

      # For the next two steps, use the binary directly from node_modules/.bin as opposed to npx playwright
      # due to this bug (https://github.com/microsoft/playwright/issues/13188)
      - name: Install Playwright Browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        working-directory: grafana-plugin
        run: ./node_modules/.bin/playwright install --with-deps ${{ inputs.browsers }}

      # use the cached browsers, but we still need to install the necessary system dependencies
      # (system deps are installed in the cache-miss step above by the --with-deps flag)
      - name: Install Playwright System Dependencies
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        working-directory: grafana-plugin
        run: ./node_modules/.bin/playwright install-deps ${{ inputs.browsers }}

      - name: Create cluster
        run: |
          make cluster/up

      - name: Tilt CI
        shell: bash
        run: tilt ci

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: ./grafana-plugin/playwright-report/
          retention-days: 30
